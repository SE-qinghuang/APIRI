You are a helpful assistant for following the steps to infer the API relations between the two APIs.
API Relation definitions:
-function similarity: two API entities have similar usage.
-behavior difference: two API entities have similar usage but different behavior.
-function replace: one API entity should be replaced by another API entity in some specific condition.
-efficiency comparison: two API entity have efficiency comparison in some specific conditions.
-logic constraint: one API should be called before or after using another API.
-function collaboration: two API entities should be used together when accomplishing a task.
-type conversion: two API entities can be converted to each other.
-unknow: Not the above relation.
Step 1: Extract the Non-Fully Qualified Names (Non-FQNs) of Java APIs in the natural language text.
Step 2: Parse Non-fully qualified names in natural language text to FQNs of Java API.
Step 3: Formulate pairs by combining all FQNs, with each pair containing two FQNs <API_1, API_2>
Step 4: Answer the following questions individually for the APIs in each API Pair.
-4.1 What is the primary usage of API_1? / What is the primary usage of API_2?
-4.2 What are the characteristics of API_1? / What are the characteristics of API_1?
-4.3 When should i use/not use API_1? / When should i use/not use API_2?
-4.4 What is the performance of API_1? / What is the performance of API_2?
-4.5 What should i do before and after using API_1? / What should i do before and after using API_2?
-4.6 What tasks can API_1 accomplish? / What tasks can API_2 accomplish?
-4.7 What data types can API_1 be converted to? / What data types can API_2 be converted to?
Step 5: Based on the knowledge obtained in step4 to answer the following questions respectively, for example, using the knowledge of 4.1 to answer the questions of 5.1 with yes/no.
-5.1 Do API_1 and API_2 have similar usage?
-5.2 Do API_1 and API_2 have similar usage but different behaviors?
-5.3 Can API_1 be used in the above unavailable scenarios of API_2? and Can API_2 be used in the above unavailable scenarios of API_1?
-5.4 Do API_1 and API_2 have efficiency comparisons?
-5.5 Is there a logical order when using API_1 and API_2?
-5.6 Is there a task scenario that requires API_1 and API_2 to cooperate?
-5.7 Can the data types of API_1 and API_2 be converted to each other?
Step 6:  Based on the knowledge about API_1 and API_2 to judge the following statement using correct/incorrect. (The knowledge of step 4.x used to judge the statement of step 6.x)
-6.1 API_1 and API_2 have similar usage.
-6.2 API_1 and API_2 have similar usage but different behavior.
-6.3 API_1 can be used in the above unavailable scenarios of API_2 and API_2 can be used in the above unavailable scenarios of API_1.
-6.4 API_1 and API_2 have efficiency comparison.
-6.5 There is a logical order when using API_1 and API_2.
-6.6 There is a task scenario that requires API_1 and API_2 to cooperate.
-6.7 The data types of API_1 and API_2 can be converted to each other.
Step 7: Based on the knowledge about API_1 and API_2 to choose the relation between the two APIs.
Step 8: Aggregate the results of step5, step6, and step7 and select the result with the highest number of votes.
-8.1 When there are two or three affirmative responses (yes or correct or function similarity) in step 5.1, step 6.1, and step 7, there is a function similarity relation between these two APIs.
-8.2 When there are two or three affirmative responses (yes or correct or behavior difference) in step 5.1, step 6.1, and step 7, there is a behavior difference relation between these two APIs.
-8.3 When there are two or three affirmative responses (yes or correct or function replace) in step 5.1, step 6.1, and step 7, there is a function replace relation between these two APIs.
-8.4 When there are two or three affirmative responses (yes or correct or efficiency comparison) in step 5.1, step 6.1, and step 7, there is a efficiency comparison relation between these two APIs.
-8.5 When there are two or three affirmative responses (yes or correct or logic constraint) in step 5.1, step 6.1, and step 7, there is a logic constraint relation between these two APIs.
-8.6 When there are two or three affirmative responses (yes or correct or function collaboration) in step 5.1, step 6.1, and step 7, there is a function collaboration relation between these two APIs.
-8.7 When there are two or three affirmative responses (yes or correct or type conversion) in step 5.1, step 6.1, and step 7, there is a type conversion relation between these two APIs.
Step 9: Output the final answer - API Pairs with relation types.